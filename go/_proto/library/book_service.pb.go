// Code generated by protoc-gen-go. DO NOT EDIT.
// source: library/book_service.proto

/*
Package library is a generated protocol buffer package.

It is generated from these files:
	library/book_service.proto

It has these top-level messages:
	Rss
	GetRssRequest
	PutRssRequest
	QueryRssRequest
*/
package library

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Rss struct {
	Id  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *Rss) Reset()                    { *m = Rss{} }
func (m *Rss) String() string            { return proto.CompactTextString(m) }
func (*Rss) ProtoMessage()               {}
func (*Rss) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Rss) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rss) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type GetRssRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRssRequest) Reset()                    { *m = GetRssRequest{} }
func (m *GetRssRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRssRequest) ProtoMessage()               {}
func (*GetRssRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetRssRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PutRssRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *PutRssRequest) Reset()                    { *m = PutRssRequest{} }
func (m *PutRssRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRssRequest) ProtoMessage()               {}
func (*PutRssRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PutRssRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type QueryRssRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *QueryRssRequest) Reset()                    { *m = QueryRssRequest{} }
func (m *QueryRssRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRssRequest) ProtoMessage()               {}
func (*QueryRssRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryRssRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func init() {
	proto.RegisterType((*Rss)(nil), "library.Rss")
	proto.RegisterType((*GetRssRequest)(nil), "library.GetRssRequest")
	proto.RegisterType((*PutRssRequest)(nil), "library.PutRssRequest")
	proto.RegisterType((*QueryRssRequest)(nil), "library.QueryRssRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RssService service

type RssServiceClient interface {
	PutRss(ctx context.Context, in *PutRssRequest, opts ...grpc.CallOption) (*Rss, error)
	GetRss(ctx context.Context, in *GetRssRequest, opts ...grpc.CallOption) (*Rss, error)
	QueryRss(ctx context.Context, in *QueryRssRequest, opts ...grpc.CallOption) (RssService_QueryRssClient, error)
}

type rssServiceClient struct {
	cc *grpc.ClientConn
}

func NewRssServiceClient(cc *grpc.ClientConn) RssServiceClient {
	return &rssServiceClient{cc}
}

func (c *rssServiceClient) PutRss(ctx context.Context, in *PutRssRequest, opts ...grpc.CallOption) (*Rss, error) {
	out := new(Rss)
	err := grpc.Invoke(ctx, "/library.RssService/PutRss", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rssServiceClient) GetRss(ctx context.Context, in *GetRssRequest, opts ...grpc.CallOption) (*Rss, error) {
	out := new(Rss)
	err := grpc.Invoke(ctx, "/library.RssService/GetRss", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rssServiceClient) QueryRss(ctx context.Context, in *QueryRssRequest, opts ...grpc.CallOption) (RssService_QueryRssClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RssService_serviceDesc.Streams[0], c.cc, "/library.RssService/QueryRss", opts...)
	if err != nil {
		return nil, err
	}
	x := &rssServiceQueryRssClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RssService_QueryRssClient interface {
	Recv() (*Rss, error)
	grpc.ClientStream
}

type rssServiceQueryRssClient struct {
	grpc.ClientStream
}

func (x *rssServiceQueryRssClient) Recv() (*Rss, error) {
	m := new(Rss)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RssService service

type RssServiceServer interface {
	PutRss(context.Context, *PutRssRequest) (*Rss, error)
	GetRss(context.Context, *GetRssRequest) (*Rss, error)
	QueryRss(*QueryRssRequest, RssService_QueryRssServer) error
}

func RegisterRssServiceServer(s *grpc.Server, srv RssServiceServer) {
	s.RegisterService(&_RssService_serviceDesc, srv)
}

func _RssService_PutRss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RssServiceServer).PutRss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.RssService/PutRss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RssServiceServer).PutRss(ctx, req.(*PutRssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RssService_GetRss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RssServiceServer).GetRss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.RssService/GetRss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RssServiceServer).GetRss(ctx, req.(*GetRssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RssService_QueryRss_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRssRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RssServiceServer).QueryRss(m, &rssServiceQueryRssServer{stream})
}

type RssService_QueryRssServer interface {
	Send(*Rss) error
	grpc.ServerStream
}

type rssServiceQueryRssServer struct {
	grpc.ServerStream
}

func (x *rssServiceQueryRssServer) Send(m *Rss) error {
	return x.ServerStream.SendMsg(m)
}

var _RssService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "library.RssService",
	HandlerType: (*RssServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutRss",
			Handler:    _RssService_PutRss_Handler,
		},
		{
			MethodName: "GetRss",
			Handler:    _RssService_GetRss_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryRss",
			Handler:       _RssService_QueryRss_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "library/book_service.proto",
}

func init() { proto.RegisterFile("library/book_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xca, 0xc9, 0x4c, 0x2a,
	0x4a, 0x2c, 0xaa, 0xd4, 0x4f, 0xca, 0xcf, 0xcf, 0x8e, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0xca, 0x29, 0xa9, 0x73, 0x31, 0x07, 0x15,
	0x17, 0x0b, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x31, 0x65,
	0xa6, 0x08, 0x09, 0x70, 0x31, 0x97, 0x16, 0xe5, 0x48, 0x30, 0x81, 0x05, 0x40, 0x4c, 0x25, 0x79,
	0x2e, 0x5e, 0xf7, 0xd4, 0x92, 0xa0, 0xe2, 0xe2, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x74,
	0x2d, 0x4a, 0x8a, 0x5c, 0xbc, 0x01, 0xa5, 0xc8, 0x0a, 0xa0, 0x66, 0x30, 0x22, 0xcc, 0x50, 0xe7,
	0xe2, 0x0f, 0x2c, 0x4d, 0x2d, 0xaa, 0x44, 0x52, 0x24, 0xc2, 0xc5, 0x5a, 0x08, 0x12, 0x82, 0x2a,
	0x83, 0x70, 0x8c, 0x56, 0x30, 0x72, 0x71, 0x05, 0x15, 0x17, 0x07, 0x43, 0xdc, 0x2c, 0x64, 0xc0,
	0xc5, 0x06, 0x31, 0x5a, 0x48, 0x4c, 0x0f, 0xea, 0x70, 0x3d, 0x14, 0xbb, 0xa4, 0x78, 0xe0, 0xe2,
	0x41, 0xc5, 0xc5, 0x4a, 0x0c, 0x20, 0x1d, 0x10, 0xd7, 0x22, 0xe9, 0x40, 0x71, 0x3e, 0x86, 0x0e,
	0x33, 0x2e, 0x0e, 0x98, 0xdb, 0x84, 0x24, 0xe0, 0x72, 0x68, 0xce, 0x45, 0xd7, 0x65, 0xc0, 0x98,
	0xc4, 0x06, 0x0e, 0x50, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x86, 0xd1, 0xc7, 0x6e,
	0x01, 0x00, 0x00,
}
